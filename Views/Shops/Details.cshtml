@model Shops

@{
    ViewData["Title"] = "Details";
}

<h1>Shop details</h1>

<div class="container-fluid" style="width: 100%;">
    <div class="row">
        <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6" style="cursor: auto;">
            <center>
                <div id="myMap" style="width: 450px;height: 450px;" />
            </center>
        </div>
        <div class="col-xs-6 col-sm-6 col-md-6 col-lg-6" style="cursor: auto;">
            <div class="row">
                <div class="col-xs-4 col-sm-4 col-md-4 col-lg-4" text-align: center;">
                    <h1>@Html.DisplayFor(model => model.Description)</h1>
                    <h2>
                        @Html.DisplayFor(model => model.Address)
                    </h2>
                </div>
                <div class="col-xs-8 col-sm-8 col-md-8 col-lg-8" style="text-align: center;">
                    <h1>Open Hours</h1>
                    <h1>Sunday - Thursday:  <br />@Html.DisplayFor(model => model.OpeningTime) - @Html.DisplayFor(model => model.ClosingTime)</h1>
                    <p id="status"></p>
                </div>
            </div>
        </div>
    </div>
</div>

<h4>Shops</h4>
<div>
    @if (User.IsInRole("Admin"))
    {
    <a asp-action="Edit" asp-route-id="@Model.Id">Edit</a> 
                                                                      }
    <a asp-action="Index">Back to List</a>
</div>



<script type="text/javascript">
    var map;
                var searchManager;

                function GetMap() {
                    map = new Microsoft.Maps.Map("#myMap");
                    addRoomToMap('@Model.Description', '@Model.Address');
                }

                function addRoomToMap(name, address) {
                    findLocationByAddress(address, function (location) {
                        var shopLocation = location;
                        var shopPoint = new Microsoft.Maps.Pushpin(shopLocation);
                        var infobox = new Microsoft.Maps.Infobox(shopLocation, {
                title: name,
                description: address,
                visible: false
            });
            infobox.setMap(map);
            infobox.setOptions({ visible: true });
            Microsoft.Maps.Events.addHandler(shopPoint, 'click', function () {
            infobox.setOptions({ visible: true });
        });
            map.entities.push(shopPoint);
            map.setView({
                center: location,
                zoom: 15
            });

        });
    }

    function findLocationByAddress(address, foo) {
        // If search manager is not defined, load the search module
        if (!searchManager) {
            // Create an instance of the search manager and re-enter function
            Microsoft.Maps.loadModule('Microsoft.Maps.Search', function () {
                searchManager = new Microsoft.Maps.Search.SearchManager(map);
                findLocationByAddress(address, foo);
            });
        } else {
        var searchRequest = {
                where: address,
                callback: function (r) {
            foo(r.results[0].location);
        },
                errorCallback: function (e) {
            // If there is an error
            console.log("No results found for this address: " + address);
        }
    };

    // Make the geocode request
    searchManager.geocode(searchRequest);
        }
    }
</script>
<script type="text/javascript" src="https://www.bing.com/api/maps/mapcontrol?callback=GetMap&key=AqY3cT3wlJghOdw_kCt8QH0lXmlloWFIGF-e7ryJJ4DC4nrA_hWhb7eTGFJSjv5i" async defer></script>

<script>
    function IsOpen(open, close, curr) {
        if (open == close) {
            return true;
        }
        else if (open < close) {
            return (curr >= open && curr < close);
        } else {
            return (curr >= open || curr < close);
        }
    }

$( document ).ready(function() {

    var open = "@Model.OpeningTime";
    var close = "@Model.ClosingTime";
    var open_date = new Date(open);
    var close_date = new Date(close);
    var now_date = new Date();

    var open_minutes = open_date.getMinutes() + open_date.getHours() * 60;
    var close_minutes = close_date.getMinutes() + close_date.getHours() * 60;
    var now_minutes = now_date.getMinutes() + now_date.getHours() * 60;

    if (IsOpen(open_minutes, close_minutes, now_minutes)) {
        $("#status").html("Open");
        $("#status").addClass("open");
    } else {
        $("#status").html("Closed");
        $("#status").addClass("closed");
    }
});
</script>


<style>
    .open {
        color: green;
    }

    .closed {
        color: red;
    }

</style>